#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define BUFFER_SIZE 1024

/**
 * main - Entry point of the shell
 *
 * This function implements a basic UNIX command line interpreter (shell).
 * It repeatedly displays a prompt, reads user input, executes commands, and
 * displays the prompt again until the user exits the shell using Ctrl+D.
 *
 * Return: Always 0
 */
int main(void)
{
    char *input;
    size_t input_size = BUFFER_SIZE;

    while (1)
    {
        printf("$ ");
        input = (char *)malloc(input_size * sizeof(char));

        if (input == NULL)
        {
            perror("malloc");
            exit(EXIT_FAILURE);
        }

        if (getline(&input, &input_size, stdin) == -1)
        {
            if (feof(stdin))
            {
                printf("\n");
                exit(EXIT_SUCCESS);
            }
            else
            {
                perror("getline");
                exit(EXIT_FAILURE);
            }
        }

        size_t input_length = strlen(input);
        if (input_length > 0 && input[input_length - 1] == '\n')
            input[input_length - 1] = '\0';

        char *args[BUFFER_SIZE];
        char *arg_token = strtok(input, " ");
        int arg_count = 0;

        while (arg_token != NULL)
        {
            args[arg_count++] = arg_token;
            arg_token = strtok(NULL, " ");
        }
        args[arg_count] = NULL;

        // Search for the command using PATH
        char *command = args[0];
        char *path = getenv("PATH");
        char *path_token = strtok(path, ":");
        char full_command_path[BUFFER_SIZE];

        while (path_token != NULL)
        {
            snprintf(full_command_path, BUFFER_SIZE, "%s/%s", path_token, command);
            if (access(full_command_path, X_OK) == 0)
                break;
            path_token = strtok(NULL, ":");
        }

        if (path_token == NULL)
        {
            printf("Command not found: %s\n", command);
        }
        else
        {
            pid_t child_pid = fork();
            if (child_pid == -1)
            {
                perror("fork");
                exit(EXIT_FAILURE);
            }
            else if (child_pid == 0)
            {
                if (execvp(full_command_path, args) == -1)
                {
                    perror("execvp");
                    exit(EXIT_FAILURE);
                }
            }
            else
            {
                wait(NULL);
            }
        }

        free(input);
    }

    return 0;
}
