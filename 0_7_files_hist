#include "shell.h"

/**
 * get_hist_file - gets the history file
 * @inf: param struct
 *
 * Return: allocated string with hist file
 */

char *get_hist_file(info_t *inf)
{
	char *bf, *dir;

	dir = _getenv(inf, "HOME=");
	if (!dir)
		return (NULL);
	bf = malloc(sizeof(char) * (_strlen(dir) + _strlen(HIST_FILE) + 2));
	if (!bf)
		return (NULL);
	bf[0] = 0;
	_strcpy(bf, dir);
	_strcat(bf, "/");
	_strcat(bf, HIST_FILE);
	return (bf);
}

/**
 * wr_hist - creates or appends to a file
 * @inf: param struct
 *
 * Return: (1) on success, else (-1)
 */
int wr_hist(info_t *inf)
{
	ssize_t fd;
	char *fn = get_hist_file(inf);
	list_t *node = NULL;

	if (!fn)
		return (-1);

	fd = open(fn, O_CREAT | O_TRUNC | O_RDWR, 0644);
	free(fn);
	if (fd == -1)
		return (-1);
	for (node = inf->hist; node; node = node->next)
	{
		_putsfd(node->str, fd);
		_putfd('\n', fd);
	}
	_putfd(BUF_FLUSH, fd);
	close(fd);
	return (1);
}

/**
 * rd_hist - reads history from file
 * @inf: param struct
 *
 * Return: (histcount) on success, (0) otherwise
 */
int rd_hist(info_t *inf)
{
	int i, last = 0, linecnt = 0;
	ssize_t fd, rdln, fsz = 0;
	struct stat st;
	char *bf = NULL, *fn = get_hist_file(inf);

	if (!fn)
		return (0);

	fd = open(fn, O_RDONLY);
	free(fn);
	if (fd == -1)
		return (0);
	if (!fstat(fd, &st))
		fsz = st.st_size;
	if (fsz < 2)
		return (0);
	bf = malloc(sizeof(char) * (fsz + 1));
	if (!bf)
		return (0);
	rdln = read(fd, bf, fsz);
	bf[fsz] = 0;
	if (rdln <= 0)
		return (free(bf), 0);
	close(fd);
	for (i = 0; i < fsz; i++)
		if (bf[i] == '\n')
		{
			bf[i] = 0;
			build_hist_lst(inf, bf + last, linecnt++);
			last = i + 1;
		}
	if (last != i)
		build_hist_lst(inf, bf + last, linecnt++);
	free(bf);
	inf->hstcnt = linecnt;
	while (inf->hstcnt-- >= HIST_MAX)
		del_node_at_idx(&(inf->hist), 0);
	renum_hist(inf);
	return (inf->hstcnt);
}

/**
 * build_hist_lst - adds entry to a history linked list
 * @inf: Struct containing potential arguments.
 * @bf: buffer
 * @linecnt: history linecount, hstcnt
 *
 * Return: (0)
 */
int build_hist_lst(info_t *inf, char *bf, int linecnt)
{
	list_t *node = NULL;

	if (inf->hist)
		node = inf->hist;
	add_node_end(&node, bf, linecnt);

	if (!inf->hist)
		inf->hist = node;
	return (0);
}

/**
 * renum_hist - renumbers the history linked list after changes
 * @inf: Struct containing potential arguments.
 *
 * Return: (new hstcnt)
 */
int renum_hist(info_t *inf)
{
	list_t *node = inf->hist;
	int i = 0;

	while (node)
	{
		node->num = i++;
		node = node->next;
	}
	return (inf->hstcnt = i);
}
