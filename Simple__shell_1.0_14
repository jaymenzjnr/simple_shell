#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_INPUT_LENGTH 1024

int last_exit_status = 0;

// Function to replace $? and $$ variables
char *replace_variables(char *input) {
    char *result = (char *)malloc(MAX_INPUT_LENGTH);
    int result_idx = 0;
    int input_len = strlen(input);

    for (int i = 0; i < input_len; i++) {
        if (input[i] == '$') {
            i++;
            if (input[i] == '$') {
                // Replace $$ with current process ID
                result_idx += sprintf(result + result_idx, "%d", getpid());
            } else if (input[i] == '?') {
                // Replace $? with last exit status
                result_idx += sprintf(result + result_idx, "%d", last_exit_status);
            } else {
                // Just copy the character $
                result[result_idx++] = '$';
                i--;
            }
        } else {
            result[result_idx++] = input[i];
        }
    }

    result[result_idx] = '\0';
    return result;
}

int main() {
    char input[MAX_INPUT_LENGTH];

    while (1) {
        printf("Shell> ");
        if (fgets(input, sizeof(input), stdin) == NULL) {
            printf("Goodbye!\n");
            break;
        }

        // Remove newline character
        input[strcspn(input, "\n")] = '\0';

        // Handle variable replacement
        char *replaced_input = replace_variables(input);

        // Split input into arguments
        char *args[MAX_INPUT_LENGTH];
        int argc = 0;

        char *token = strtok(replaced_input, " ");
        while (token != NULL) {
            args[argc++] = token;
            token = strtok(NULL, " ");
        }
        args[argc] = NULL;

        // Handle internal commands or execute external command
        if (argc > 0) {
            if (strcmp(args[0], "exit") == 0) {
                printf("Goodbye!\n");
                break;
            }
            
            // Implement other internal commands here
            
            // External command execution
            pid_t pid = fork();
            if (pid == 0) {
                execvp(args[0], args);
                perror("Error executing command");
                exit(1);
            } else if (pid < 0) {
                perror("Error forking");
            } else {
                wait(&last_exit_status);
            }
        }
    }

    return 0;
}
