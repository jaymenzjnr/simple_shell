#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_INPUT_LENGTH 1024

int last_exit_status = 0;

/**
 * replace_variables - Replaces $? and $$ variables in a string.
 * @input: The input string to process.
 *
 * This function replaces occurrences of $? with the last exit status and
 * $$ with the current process ID.
 *
 * Return: The processed string.
 */
char *replace_variables(char *input) {
    // ... (implementation as before)
}

int main(int argc, char *argv[]) {
    // Check if a filename is provided as a command-line argument
    if (argc == 2) {
        FILE *file = fopen(argv[1], "r");
        if (file == NULL) {
            perror("Error opening file");
            return 1;
        }

        char line[MAX_INPUT_LENGTH];

        while (fgets(line, sizeof(line), file) != NULL) {
            // Remove newline character
            line[strcspn(line, "\n")] = '\0';

            // Handle variable replacement
            char *replaced_line = replace_variables(line);

            // Split input into arguments
            char *args[MAX_INPUT_LENGTH];
            int arg_count = 0;

            char *token = strtok(replaced_line, " ");
            while (token != NULL) {
                args[arg_count++] = token;
                token = strtok(NULL, " ");
            }
            args[arg_count] = NULL;

            // Execute external command
            if (arg_count > 0) {
                pid_t pid = fork();
                if (pid == 0) {
                    execvp(args[0], args);
                    perror("Error executing command");
                    exit(1);
                } else if (pid < 0) {
                    perror("Error forking");
                } else {
                    wait(&last_exit_status);
                }
            }
        }

        fclose(file);
        return 0;
    } else if (argc > 2) {
        fprintf(stderr, "Usage: %s [filename]\n", argv[0]);
        return 1;
    }

    char input[MAX_INPUT_LENGTH];

    while (1) {
        printf("Shell> ");
        if (fgets(input, sizeof(input), stdin) == NULL) {
            printf("Goodbye!\n");
            break;
        }

        // Remove newline character
        input[strcspn(input, "\n")] = '\0';

        // Ignore comments (lines starting with #)
        if (input[0] == '#') {
            continue;
        }

        // Handle variable replacement
        char *replaced_input = replace_variables(input);

        // Split input into arguments
        char *args[MAX_INPUT_LENGTH];
        int argc = 0;

        char *token = strtok(replaced_input, " ");
        while (token != NULL) {
            args[argc++] = token;
            token = strtok(NULL, " ");
        }
        args[argc] = NULL;

        // Handle internal commands or execute external command
        if (argc > 0) {
            if (strcmp(args[0], "exit") == 0) {
                printf("Goodbye!\n");
                break;
            }

            // Implement other internal commands here

            // External command execution
            pid_t pid = fork();
            if (pid == 0) {
                execvp(args[0], args);
                perror("Error executing command");
                exit(1);
            } else if (pid < 0) {
                perror("Error forking");
            } else {
                wait(&last_exit_status);
            }
        }
    }

    return 0;
}
